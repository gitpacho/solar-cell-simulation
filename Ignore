{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "InGaN",
      "private_outputs": true,
      "provenance": [],
      "collapsed_sections": [
        "ufxxBCy-qx_F",
        "hf6Yfy6HtKQt",
        "7P-T2cTAta4J",
        "dk6_qoKC8G9q",
        "dd9L8PLpXOHb",
        "q_msns-zXC8L",
        "ZkSt3Lbo8eip"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ufxxBCy-qx_F"
      },
      "source": [
        "# Libreries -- Constant values -- Solar Spectrum"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zqGNR1yjq0G2"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import scipy.integrate as integrate\n",
        "from scipy.interpolate import interp1d\n",
        "\n",
        "Kb = 8.6 * 10  ** (-5)           # eV/K\n",
        "q = 1.602 * 10 ** (-19)          # cm\n",
        "T = 300                                # T\n",
        "eps_0 = (8.85 * 10 ** -12) / 10000     # C^2 / (N*cm^2)\n",
        "c = (3 * 10 ** 8) * 10 ** 9            # nm/s\n",
        "h = 4.135667731 * 10 ** (-15)          # ev*s\n",
        "m0 = 9.10938291 * 10 ** -31            # Kg\n",
        "Ref, Trans = 0.1, 1\n",
        "\n",
        "spectrum = pd.read_csv('espectro_.csv', header=0, delimiter=';', decimal = \",\")\n",
        "lamb  = np.array(spectrum.loc[(spectrum['Wvlgth nm'] >= 200.0) & (spectrum['Wvlgth nm'] <= 118000.0), 'Wvlgth nm'])\n",
        "I_AM15  = np.array(spectrum.loc[(spectrum['Wvlgth nm'] >= 200.0) & (spectrum['Wvlgth nm'] <= 118000.0), 'Global tilt  W*m-2*nm-1'])\n",
        "photon_flux = I_AM15 * lamb / (q * 1240) / 10000   # 1 / (cm² * nm)\n",
        "\n",
        "P_inc = (integrate.simps(I_AM15) / 10000) * 1000   # mW / cm²\n",
        "P_inc"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hf6Yfy6HtKQt"
      },
      "source": [
        "# 1. InGaN properties."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wF9BTL0DrJ-a"
      },
      "source": [
        "Eg_InN,  Eg_GaN  = 0.65,              3.42\n",
        "Per_InN, Per_GaN = 15.3,              8.9              \n",
        "Nc_InN,  Nc_GaN  = 0.9 * 10 ** 18,    2.3 * 10 ** 18\n",
        "Nv_InN,  Nv_GaN  = 5.3 * 10 ** 19,    1.8 * 10 ** 19\n",
        "Dn_InN,  Dn_GaN  = 80,                39 \n",
        "Dp_InN,  Dp_GaN  = 8,                 0.75\n",
        "taon_InN, Taon_GaN = 1 * 10 ** -9,     0.1 * 10 ** -9    \n",
        "taop_InN, Taop_GaN = 5.4* 10 ** -9,     7 * 10 ** -9      \n",
        "\n",
        "\n",
        "def DOS(m):\n",
        "    k_ = Kb * q #for unities\n",
        "    h_ = h * q  #for unities\n",
        "    return 2 * (2 * np.pi * m * m0 * k_ * T / (h_ ** 2)) ** 1.5 / 1000000\n",
        "def Difusivity(mob): return (Kb * T) * mob\n",
        "def intrinsic(Nc, Nv, Eg): return (Nc * Nv) ** 0.5 * np.exp(- Eg / (2 * Kb * T))\n",
        "def Diffusion_Length(D,t): return (D * t) ** 0.5\n",
        "def EgInGaN(X): return X * Eg_InN + (1 - X) * Eg_GaN - 1.43 * X * (1 - X)\n",
        "def electron_effective_mass(X): return 0.12 * X + 0.2 * (1 - X)  \n",
        "def hole_effective_mass(X): return 0.17 * X + 1 * (1 - X)  \n",
        "def chiInGaN(x, E): return 4.1 + 0.7 * (3.4 - E)\n",
        "def PermInGaN(x): return Per_InN * x + Per_GaN * (1 - x)\n",
        "def electron_lifetime_InGaN(X): return taon_InN * X + Taon_GaN * (1-X) \n",
        "def hole_lifetime_InGaN(X): return taop_InN * X + Taop_GaN * (1-X) \n",
        "\n",
        "\n",
        "#Optical Absortion\n",
        "x_lab = [1, 0.83, 0.69, 0.57, 0.5, 0] \n",
        "a = [0.69642, 0.66796, 0.58108, 0.60946, 0.51672, 3.52517]\n",
        "b = [0.46055, 0.68886, 0.66902, 0.62182, 0.46836, -0.65710]\n",
        "A1, A2, A3, A4, A5 = np.polyfit(x_lab, a, 4)\n",
        "B1, B2, B3, B4, B5 = np.polyfit(x_lab, b, 4)\n",
        "def cte_a(X): return A1 * X ** 4 + A2 * X ** 3 + A3 * X ** 2 + A4 * X + A5\n",
        "def cte_b(X): return B1 * X ** 4 + B2 * X ** 3 + B3 * X ** 2 + B4 * X + B5\n",
        "def optical_absorption(X): \n",
        "    A = cte_a(X) * ((1240/lamb) - EgInGaN(X) )\n",
        "    B = cte_b(X) * ((1240/lamb) - EgInGaN(X) ) ** 2\n",
        "    C = A + B\n",
        "    C[np.where(C < 0)] = 0 \n",
        "    return (10 ** 5) * (C) ** 0.5\n",
        "\n",
        "\n",
        "#Mobility\n",
        "x_values = np.array([0, 0.2, 0.5, 0.8, 1])\n",
        "mmax = np.array([1460.7, 684.2, 758.1, 1252.7, 3138.4])\n",
        "mmin = np.array([295,    386.4, 456.4, 644.3,  774])\n",
        "cte_values = np.array([0.66, 1.37, 1.04, 0.82, 0.68])\n",
        "C1, C2, C3, C4, C5 = np.polyfit(x_values, mmax, 4)\n",
        "D1, D2, D3, D4, D5 = np.polyfit(x_values, mmin, 4)\n",
        "E1, E2, E3, E4, E5 = np.polyfit(x_values, cte_values, 4)\n",
        "def mov_max(X): return C1 * X ** 4 + C2 * X ** 3 + C3 * X ** 2 + C4 * X + C5\n",
        "def mov_min(X): return D1 * X ** 4 + D2 * X ** 3 + D3 * X ** 2 + D4 * X + D5\n",
        "def gamma(X): return E1 * X ** 4 + E2 * X ** 3 + E3 * X ** 2 + E4 * X + E5\n",
        "def electron_mobility(X, N): \n",
        "    DEN = 1 + ((N / (1 * 10 ** 17)) ** gamma(X))\n",
        "    return mov_min(X) + ( (mov_max(X) - mov_min(X)) / DEN)\n",
        "def hole_mobility(X, N):\n",
        "    DENInN = 1 + ((N / (3 * 10 ** 17)) ** 2)\n",
        "    DENGaN = 1 + ((N / (3 * 10 ** 17)) ** 2)\n",
        "    MOVInN = 3 + ( (340 - 3) / DENInN)\n",
        "    MOVGaN = 3 + ( (170 - 3) / DENGaN)\n",
        "    return MOVInN * X + MOVGaN * (1 - X)\n",
        "\n",
        "\n",
        "#Function for obtain all the properties of IGN\n",
        "def n_IGN_properties(conc_n, N_n):\n",
        "      Eg_IGN_n    =  EgInGaN(conc_n)\n",
        "      chi_IGN_n   =  chiInGaN(conc_n, Eg_IGN_n)\n",
        "      Perm_IGN_n  =  PermInGaN(conc_n)\n",
        "      me_IGN_n    =  electron_effective_mass(conc_n)\n",
        "      mh_IGN_n    =  hole_effective_mass(conc_n)\n",
        "      Nc_IGN_n    =  DOS(me_IGN_n)\n",
        "      Nv_IGN_n    =  DOS(mh_IGN_n)\n",
        "      Mp_IGN_n    =  hole_mobility(conc_n, N_n)  ##########\n",
        "      Dp_IGN_n    =  Difusivity(Mp_IGN_n)\n",
        "      tp_IGN_n    =  hole_lifetime_InGaN(conc_n)\n",
        "      Lp_IGN_n    =  Diffusion_Length(Dp_IGN_n,tp_IGN_n)\n",
        "      S_IGN_n     =  10 ** 3\n",
        "      ni_IGN_n    =  intrinsic(Nc_IGN_n, Nv_IGN_n, Eg_IGN_n)\n",
        "      alpha_IGN_n =  optical_absorption(conc_n)\n",
        "      return Eg_IGN_n, chi_IGN_n, Perm_IGN_n, Nc_IGN_n, Nv_IGN_n, Dp_IGN_n, tp_IGN_n, Lp_IGN_n, S_IGN_n, ni_IGN_n, alpha_IGN_n\n",
        "\n",
        "def p_IGN_properties(conc_p, N_p):\n",
        "      ###tipo_p\n",
        "      Eg_IGN_p   =  EgInGaN(conc_p)\n",
        "      chi_IGN_p  =  chiInGaN(conc_p, Eg_IGN_p)\n",
        "      Perm_IGN_p =  PermInGaN(conc_p)\n",
        "      me_IGN_p  =  electron_effective_mass(conc_p)\n",
        "      mh_IGN_p  =  hole_effective_mass(conc_p)\n",
        "      Nc_IGN_p  =  DOS(me_IGN_p)\n",
        "      Nv_IGN_p  =  DOS(mh_IGN_p)\n",
        "      Mn_IGN_p  =  hole_mobility(conc_p, N_p)  ##########\n",
        "      Dn_IGN_p  =  Difusivity(Mn_IGN_p)\n",
        "      tn_IGN_p  =  hole_lifetime_InGaN(conc_p)\n",
        "      Ln_IGN_p  =  Diffusion_Length(Dn_IGN_p,tn_IGN_p)\n",
        "      S_IGN_p    =  10 ** 3\n",
        "      ni_IGN_p   =  intrinsic(Nc_IGN_p, Nv_IGN_p, Eg_IGN_p)\n",
        "      alpha_IGN_p =  optical_absorption(conc_p)\n",
        "      return Eg_IGN_p, chi_IGN_p, Perm_IGN_p, Nc_IGN_p, Nv_IGN_p, Dn_IGN_p, tn_IGN_p, Ln_IGN_p, S_IGN_p, ni_IGN_p, alpha_IGN_p\n",
        "\n",
        "\n",
        "import matplotlib as mpl\n",
        "params = {'xtick.labelsize': 13, 'ytick.labelsize': 13, 'legend.title_fontsize' : 20}\n",
        "mpl.rcParams.update(params)\n",
        "\n",
        "ejes = 14\n",
        "fig, ax = plt.subplots()\n",
        "x = np.linspace(0, 1, 35)\n",
        "plt.legend(fontsize = 14, loc = 'upper right')\n",
        "ax.plot(x, EgInGaN(x), 'o', linewidth = 2, markersize = 4, label = r'$E_{g}(x) = 0.64 x + 3.42 (1-x) - 1.43 x (1-x)$');\n",
        "plt.grid()\n",
        "plt.ylabel(r'$E_{g} \\ [eV]$', fontsize = ejes)\n",
        "plt.xlabel(r'$Estequiometría \\ x$', fontsize = ejes)\n",
        "plt.xlim(0, 1)\n",
        "plt.ylim(0.05, 3.5)\n",
        "plt.title(r'$E_{g}(x) = 0.64 x + 3.42 (1-x) - 1.43 x (1-x)$', fontsize = ejes);\n",
        "#plt.legend(fontsize = 14, loc = 'center')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7P-T2cTAta4J"
      },
      "source": [
        "#2. Basic functions."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mkJhPG0yrcuE"
      },
      "source": [
        "def Vbi(Egn, Egp, chin, chip, Nd, Na, Ncn, Ncp, Nvn, Nvp, nin, nip):\n",
        "    delta_gap = Egn - Egp\n",
        "    delta_ec  = chip - chin\n",
        "    delta_ev  = delta_gap - delta_ec\n",
        "    A = (delta_ec - delta_ev) / 2\n",
        "    B = Kb * T * np.log(Nd * Na / (nin * nip))\n",
        "    C = 0.5 * Kb * T * np.log(Ncp * Nvn / (Ncn * Nvp))\n",
        "    return A + B + C\n",
        "def region(a, b, epsn, epsp, Nd, Na, Vbi, V):\n",
        "    A = 2 * epsp * epsn * eps_0 * a * (Vbi - V) * 100\n",
        "    B = q * b * (epsn * Nd + epsp * Na)\n",
        "    return (A / B) ** 0.5\n",
        "def pn0(ni, N): return (ni ** 2 / N)\n",
        "def j0pn(D, pn0, L, s, w, x):               #A/cm^2\n",
        "    A = q * D * pn0 / L\n",
        "    B = s * L / D\n",
        "    ang = (w - x) / L\n",
        "    return A * (B * np.cosh(ang) + np.sinh(ang) ) / (B * np.sinh(ang) + np.cosh(ang))\n",
        "def j00(xn, xp, nin, nip, Lp, Ln, Dp, Dn):   #A/cm^2\n",
        "    taop = (Lp ** 2) / Dp\n",
        "    taon = (Ln ** 2) / Dn\n",
        "    return q * ( (xn * nin / taop) + (xp * nip / taon))\n",
        "def jdark(j01, j02, j00, v):                    #A/cm^2\n",
        "    j0 = j01 + j02\n",
        "    Jnight = (j0 * (np.exp(v / (Kb * T)) - 1)) + (j00 * (np.exp(v / (2 * Kb * T)) - 1))\n",
        "    return Jnight\n",
        "def djn(sn, Ln, Dn, wp, xp, alpha2, wn, alpha1, Ref, Trans):\n",
        "    cte1 = sn * Ln / Dn\n",
        "    cte2 = wp - xp\n",
        "    angulo = (wp - xp) / Ln    \n",
        "    A = q * photon_flux * (1 - Ref) * Trans * alpha2 * Ln\n",
        "    B = np.exp(-(alpha1 * wn + alpha2 * xp))\n",
        "    C = ((alpha2 ** 2) * (Ln ** 2)) - 1\n",
        "    D = alpha2 * Ln\n",
        "    E = cte1 * (np.cosh(angulo) - np.exp( - alpha2 * cte2 ) )\n",
        "    F = np.sinh(angulo) \n",
        "    G = alpha2 * Ln * np.exp(- alpha2 * cte2)\n",
        "    H = cte1 * np.sinh(angulo)\n",
        "    I = np.cosh(angulo)\n",
        "    return (A * B / C) * (D - ( (E + F + G ) / (H + I) ))\n",
        "def djp(sp, Lp, Dp, wn, xn, alpha1, Ref, Trans):\n",
        "    cte1 = sp * Lp / Dp\n",
        "    cte2 = wn - xn\n",
        "    angulo = (wn - xn) / Lp\n",
        "    A = q * photon_flux * (1 - Ref) * Trans * alpha1 * Lp\n",
        "    B = ((alpha1 ** 2) * (Lp ** 2) ) - 1\n",
        "    C = cte1 + (alpha1 * Lp)\n",
        "    D = np.exp(- (alpha1 * cte2))\n",
        "    E = ( cte1 * np.cosh(angulo) ) + np.sinh(angulo)\n",
        "    F = ( cte1 * np.sinh(angulo) ) + np.cosh(angulo)\n",
        "    G = alpha1 * Lp * np.exp( - alpha1 * cte2)\n",
        "    return (A / B) *  ( ((C - D * E) / F) - G)\n",
        "    \n",
        "def djscr(xn, xp, wn, alpha1, alpha2 , Ref, Trans):\n",
        "    A = q * photon_flux * (1 - Ref) * Trans * np.exp( - alpha1 * (wn - xn))\n",
        "    B = 1 - np.exp( - alpha1 * xn)\n",
        "    C = np.exp( - alpha1 * xn) * (1 - np.exp(- alpha2 * xp))\n",
        "    return A * (B + C)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5lRpLXpz8Fe8"
      },
      "source": [
        "def CHARACTERISTICS_VALUES(J_list, Pot_list, V_list):\n",
        "  \n",
        "    Positives = [x for x in J_list if x > 0]\n",
        "    Position = len(Positives)\n",
        "    x1, x2 = V_list[Position - 1], V_list[Position]\n",
        "    y1, y2 = J_list[Position - 1], J_list[Position]\n",
        "    m = (y2 - y1) / (x2 - x1)\n",
        "    \n",
        "    V_oc = (- y1 / m) + x1\n",
        "    J_sc = J_list[0] * 1000\n",
        "    \n",
        "    Pot_list_ = [x for x in Pot_list if str(x) != 'nan']\n",
        "    Position = int(np.where(Pot_list_ == np.amax(Pot_list_))[0])\n",
        "    V_mpp = V_list[Position] \n",
        "    J_mpp = J_list[Position] * 1000\n",
        "    x_n_opt = x_n_list[Position]\n",
        "    x_p_opt = x_p_list[Position]\n",
        "    \n",
        "    FF = ((J_mpp * V_mpp) / (J_sc * V_oc)) * 100\n",
        "    Eff = (J_mpp * V_mpp) / P_inc\n",
        "    return V_oc, J_sc, FF, Eff, x_n_opt, x_p_opt\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dk6_qoKC8G9q"
      },
      "source": [
        "#3. Basic Simulation function J vs V"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-hUpgJU1rgJs"
      },
      "source": [
        "V_list = np.linspace(0,3,61)\n",
        "\n",
        "def base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p):\n",
        "    j_list, Pot_list = [], [] \n",
        "    x_n_list  = []\n",
        "    x_p_list = [] \n",
        "    for V in V_list:\n",
        "        Eg_IGN_n, chi_IGN_n, Perm_IGN_n, Nc_IGN_n, Nv_IGN_n, Dp_IGN_n, tp_IGN_n, Lp_IGN_n, S_IGN_n, ni_IGN_n, alpha_IGN_n = n_IGN_properties(conc_n, N_n)\n",
        "        Eg_IGN_p, chi_IGN_p, Perm_IGN_p, Nc_IGN_p, Nv_IGN_p, Dn_IGN_p, tn_IGN_p, Ln_IGN_p, S_IGN_p, ni_IGN_p, alpha_IGN_p = p_IGN_properties(conc_p, N_p)\n",
        "\n",
        "        #CORRESPONDENCES\n",
        "        Eg_n,  Eg_p  = Eg_IGN_p,        Eg_IGN_n\n",
        "        chi_n, chi_p = chi_IGN_p,       chi_IGN_n\n",
        "        N_d,   N_a   = N_p,             N_n\n",
        "        Nc_n,  Nc_p  = Nc_IGN_p,        Nc_IGN_n\n",
        "        Nv_n,  Nv_p  = Nv_IGN_p,        Nv_IGN_n\n",
        "        eps_n, eps_p = Perm_IGN_p,      Perm_IGN_n\n",
        "        D_p,   D_n   = Dn_IGN_p,        Dp_IGN_n\n",
        "        L_p,   L_n   = Ln_IGN_p,        Lp_IGN_n\n",
        "        s_p,   s_n   = S_IGN_p,         S_IGN_n\n",
        "        w_n,   w_p   = w_IGN_p,         w_IGN_n \n",
        "        alpha_1 = alpha_IGN_p\n",
        "        alpha_2 = alpha_IGN_n\n",
        "        ni_n = ni_IGN_p\n",
        "        ni_p = ni_IGN_n\n",
        "\n",
        "        #OPERATIONS\n",
        "        V_bi = Vbi(Eg_n, Eg_p, chi_n, chi_p, N_d, N_a, Nc_n, Nc_p, Nv_n, Nv_p, ni_n, ni_p)        \n",
        "        x_n = region(N_a, N_d, eps_n, eps_p, N_d, N_a, V_bi, V )\n",
        "        x_p = region(N_d, N_a, eps_n, eps_p, N_d, N_a, V_bi, V )\n",
        "        if x_n > w_n:\n",
        "            x_n = w_n\n",
        "            x_p = w_n * (N_d / N_a)\n",
        "        if x_p > w_p:\n",
        "            x_p = w_p\n",
        "            x_n = w_p * (N_a / N_d)\n",
        "        \n",
        "        x_n_list.append(x_p)\n",
        "        x_p_list.append(x_n)\n",
        "        n_0 = pn0(ni_p, N_a)    #p\n",
        "        p_0 = pn0(ni_n, N_d)    #n\n",
        "        j0_n = j0pn(D_n, n_0, L_n, s_n, w_p, x_p)\n",
        "        j0_p = j0pn(D_p, p_0, L_p, s_p, w_n, x_n)\n",
        "        j_00 = j00(x_n, x_p, ni_n, ni_p, L_p, L_n, D_p, D_n)\n",
        "        j_dark = jdark(j0_n, j0_p, j_00, V)\n",
        "        dj_n    = djn(s_n, L_n, D_n, w_p, x_p, alpha_2, w_n, alpha_1, Ref, Trans)   \n",
        "        dj_p    = djp(s_p, L_p, D_p, w_n, x_n, alpha_1, Ref, Trans)\n",
        "        dj_scr  = djscr(x_n, x_p, w_n, alpha_1, alpha_2 , Ref, Trans)\n",
        "        j_ph = integrate.simps(dj_p + dj_n + dj_scr)\n",
        "        j_cell = j_ph - j_dark\n",
        "        j_list.append(j_cell)\n",
        "        Pot_list.append(V * j_cell)\n",
        "    return j_list, Pot_list, x_n_list, x_p_list"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "woaoq41ysszZ"
      },
      "source": [
        "# Test Simulation: changing the window layer stoichiometry"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WOfOY52Brl1W"
      },
      "source": [
        "J_lists, Pot_lists = [], []\n",
        "Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], []\n",
        "\n",
        "N_n = 10 ** 17 \n",
        "N_p = 10 ** 17\n",
        "w_IGN_n    =  1 * 10 ** - 4\n",
        "w_IGN_p    =  0.1 * 10 ** - 4\n",
        "conc_p = 0 \n",
        "conc_n_list = np.linspace(0,1, 11)\n",
        "\n",
        "\n",
        "for conc_n in conc_n_list:\n",
        "    J_list, Pot_list, x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "    J_lists.append(J_list)\n",
        "    Pot_lists.append(Pot_list )\n",
        "\n",
        "    Voc, Jsc, FF, Eff, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)        \n",
        "    Jsc_list.append(Jsc)\n",
        "    Voc_list.append(Voc)\n",
        "    FF_list.append(FF)\n",
        "    Eff_list.append(Eff)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ab3JvRrorujk"
      },
      "source": [
        "fig = plt.figure(figsize=(7,5))\n",
        "for i, j in enumerate(conc_n_list):\n",
        "    plt.plot(V_list, np.array(J_lists[i]) * 10 ** 3, label = r'$x \\ = \\ {:.1f}$'.format(j))\n",
        "    plt.ylim(0, 50)\n",
        "    plt.grid('on')\n",
        "    plt.legend(title = r'$In_{x}Ga_{1-x}N$')\n",
        "    plt.xlabel(r'$Voltaje \\ [V]$', size = 12)\n",
        "    plt.ylabel(r'$J \\ [mA/cm²]$', size = 12)\n",
        "    plt.yticks(list(range(5,41,5)))\n",
        "    plt.title(r'${:.2f} \\ \\mu m \\ (Absorbente)\\ \\ \\ / \\ \\ \\ {:.2f} \\ \\mu m \\ (Ventana)$'.format(w_IGN_p * 10 ** 4,w_IGN_n * 10 ** 4)) \n",
        "#fig.savefig('/home/crepachonpa/Desktop/resultados2/JvsV/abs({:.1f})-vent({:.1f})'.format(w_IGN_p * 10  ** 4,w_IGN_n * 10  ** 4 ) + '(x = {:.2f})'.format(conc_n) +'.png', dpi=fig.dpi)\n",
        "    \n",
        "    \n",
        "fig = plt.figure(figsize=(7,5))\n",
        "for i, j in enumerate(conc_n_list):\n",
        "    plt.plot(V_list, np.array(Pot_lists[i]) * 10 ** 3, label = r'$x \\ = \\ {:.1f}$'.format(j))\n",
        "    #plt.xlim(0, 3)\n",
        "    plt.ylim(0, 20)\n",
        "    plt.legend(title = r'$In_{x}Ga_{1-x}N$')\n",
        "    plt.grid('on')\n",
        "    plt.xlabel(r'$Voltaje \\ [V]$', size = 12)\n",
        "    plt.ylabel(r'$J \\ [mA/cm²]$', size = 12)\n",
        "    plt.yticks(np.arange(2.5, 21, 2.5))\n",
        "    plt.title(' {:.3f}, {:.3f} '.format(w_IGN_n * 10 ** 4,w_IGN_p * 10 ** 4)) \n",
        "    plt.title(r'${:.2f} \\ \\mu m \\ (Absorbente)\\ \\ \\ / \\ \\ \\ {:.2f} \\ \\mu m \\ (Ventana)$'.format(w_IGN_p * 10 ** 4,w_IGN_n * 10 ** 4)) \n",
        "#fig.savefig('/home/crepachonpa/Desktop/resultados2/PvsV/abs({:.1f})-vent({:.1f})'.format(w_IGN_p * 10  ** 4,w_IGN_n * 10  ** 4 ) + '(x = {:.2f})'.format(conc_n) +'.png', dpi=fig.dpi)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lbsNlmrbXNXj"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dd9L8PLpXOHb"
      },
      "source": [
        "#Simulation J vs V changing all parameters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q58frtuh3gdj"
      },
      "source": [
        "labels_size = 15\n",
        "def individual_graph(ax):\n",
        "    for i, j in enumerate(conc_n_list):\n",
        "      ax.plot(V_list, np.array(J_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = 2.2)\n",
        "      ax.set_xlim(0, 3)\n",
        "      ax.set_ylim(0, 42.5)\n",
        "      ax.text(2.7, 39, r\"$J\\ vs\\ V$\", ha=\"center\", va=\"center\", size = 12)\n",
        "\n",
        "      #ax.set_title('{:.1e}:{:.1e}'.format(w_up, w_down))\n",
        "      #ax.set_xlabel(r'$Voltaje\\ [V]$', size = labels_size)\n",
        "      ax.grid('on')\n",
        "      ax.set_xticks([0.5, 1, 1.5, 2, 2.5])\n",
        "      ax.set_yticks([10, 20, 30])        \n",
        "      plt.tight_layout()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mDgF5-I6ryVI"
      },
      "source": [
        "##########simulacion evolucion j vs v\n",
        "%matplotlib inline\n",
        "from itertools import product\n",
        "import matplotlib as mpl\n",
        "params = {'xtick.labelsize': 14, 'ytick.labelsize': 14, 'legend.title_fontsize' : 12}\n",
        "mpl.rcParams.update(params)\n",
        "\n",
        "\n",
        "conc_p = 0\n",
        "V_list = np.linspace(0, 3, 51)\n",
        "w_IGN_p_list    =  np.array([0.1, 1, 10]) * 10 ** -5\n",
        "w_IGN_n_list    =  np.array([0.1, 1, 10]) * 10 ** -5\n",
        "conc_p_list = np.linspace(0,0.8, 5)\n",
        "conc_n_list = np.linspace(0,1, 6)\n",
        "\n",
        "cross_product = list(product(w_IGN_p_list, w_IGN_n_list))\n",
        "ubication = list(product([0,1,2], [0,1,2]))\n",
        "\n",
        "for conc_p in conc_p_list: \n",
        "    fig, ax = plt.subplots(3,3)\n",
        "    fig.set_size_inches(12, 8)\n",
        "    \n",
        "    cont = 0\n",
        "    for w_IGN_p, w_IGN_n in cross_product:\n",
        "        J_lists, Pot_lists = [], []\n",
        "        Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], [] \n",
        "\n",
        "        for conc_n in conc_n_list:\n",
        "            J_list, Pot_list, x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "            J_lists.append(J_list)\n",
        "            Pot_lists.append(Pot_list )\n",
        "            Voc, Jsc, FF, Eff, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)        \n",
        "            Jsc_list.append(Jsc)\n",
        "            Voc_list.append(Voc)\n",
        "            FF_list.append(FF)\n",
        "            Eff_list.append(Eff)\n",
        "        \n",
        "        a, b = ubication[cont]    \n",
        "        individual_graph(ax[a,b])\n",
        "        if cont in [0]: ax[a,b].legend(title = r'$In_{x}Ga_{1-x}N$', fontsize = 13, fancybox=True, framealpha=1, shadow=True, borderpad=1, loc = 'right')\n",
        "        if cont in [6, 7, 8]: ax[a,b].set_xlabel(r'$Voltaje\\ [V]$', size = labels_size)\n",
        "        if cont in [0,3,6]: ax[a, b].set_ylabel(r'$J\\ [mA/cm²]$', size = labels_size) \n",
        "        \n",
        "        cont += 1\n",
        "#            \n",
        "    #plt.text(-5.4,-18, r'$Estequiometría \\ ventana \\ = \\ {:.2f}$'.format(conc_n), ha=\"center\", va=\"center\", size = 15)\n",
        "    plt.text(-2, 158, r\"$\\ \\ \\ \\ \\ \\ \\ \\ -----------Espesor \\ capa \\ absorbente------------>    $\", ha=\"center\", va=\"center\", size = 20)\n",
        "    plt.text(-2, 150, r\"${}\\ \\mu m {} {}\\ \\mu m {} {}\\ \\mu m $\".format(0.01,'\\ '* 32 , 0.1, '\\ '* 32 ,1), ha=\"center\", va=\"center\", size = 20)\n",
        "    \n",
        "    plt.text(3.7, 75, r\"$-------Espesor \\ capa \\ ventana----->$\", ha=\"center\", va=\"center\", rotation=270, size = 20)\n",
        "    plt.text(3.3, 75, r\"${}\\ \\mu m {} {}\\ \\mu m {} {}\\ \\mu m $\".format(0.01,'\\ '* 18 ,0.1, '\\ '* 18 ,1), ha=\"center\", va=\"center\", rotation=270, size = 20)\n",
        "    \n",
        "    plt.show()\n",
        "    #fig.savefig('/home/crepachonpa/Desktop/resultados2/JvsV/0-02/J_vs_V' + '({:.2f})'.format(conc_n) +'.png', dpi=fig.dpi)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ikcv_VX-LMPU"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q_msns-zXC8L"
      },
      "source": [
        "# Simulation P vs V changing all parameters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bc-CXiGIWtJa"
      },
      "source": [
        "labels_size = 15\n",
        "def individual_graph(ax):\n",
        "    for i, j in enumerate(conc_n_list):\n",
        "      ax.plot(V_list, np.array(Pot_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = 2.2)\n",
        "      ax.set_xlim(0, 3)\n",
        "      ax.set_ylim(0, 22)\n",
        "      ax.text(2.7, 20, r\"$P\\ vs\\ V$\", ha=\"center\", va=\"center\", size = 12)\n",
        "\n",
        "      #ax.set_title('{:.1e}:{:.1e}'.format(w_up, w_down))\n",
        "      #ax.set_xlabel(r'$Voltaje\\ [V]$', size = labels_size)\n",
        "      ax.grid('on')\n",
        "      #ax.set_xticks([0.5, 1, 1.5, 2, 2.5])\n",
        "      #ax.set_yticks([5, 10, 15, 20])        \n",
        "      plt.tight_layout()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Di7pQREM8ps4"
      },
      "source": [
        "%matplotlib inline\n",
        "from itertools import product\n",
        "import matplotlib as mpl\n",
        "params = {'xtick.labelsize': 14, 'ytick.labelsize': 14, 'legend.title_fontsize' : 12}\n",
        "mpl.rcParams.update(params)\n",
        "\n",
        "V_list = np.linspace(0, 3, 51)\n",
        "w_IGN_n_list    =  np.array([0.1, 1, 10]) * 10 ** -5\n",
        "w_IGN_p_list    =  np.array([0.1, 1, 10]) * 10 ** -5\n",
        "conc_p_list = np.linspace(0,0.6, 61)\n",
        "conc_n_list = np.linspace(0,1, 6)\n",
        "cross_product = list(product(w_IGN_n_list, w_IGN_p_list))\n",
        "ubication = list(product([0,1,2], [0,1,2]))\n",
        "\n",
        "for conc_p in conc_p_list: \n",
        "    fig, ax = plt.subplots(3,3)\n",
        "    fig.set_size_inches(12, 8)\n",
        "    \n",
        "    cont = 0\n",
        "    for w_IGN_p, w_IGN_n in cross_product:\n",
        "        J_lists, Pot_lists = [], []\n",
        "        Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], [] \n",
        "        for conc_n in conc_n_list:\n",
        "            J_list, Pot_list, x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "            J_lists.append(J_list)\n",
        "            Pot_lists.append(Pot_list )\n",
        "            Voc, Jsc, FF, Eff, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)        \n",
        "            Jsc_list.append(Jsc)\n",
        "            Voc_list.append(Voc)\n",
        "            FF_list.append(FF)\n",
        "            Eff_list.append(Eff)\n",
        "        \n",
        "        a, b = ubication[cont]    \n",
        "        individual_graph(ax[a,b])\n",
        "        if cont in [0]: ax[a,b].legend(title = r'$In_{x}Ga_{1-x}N$', fontsize = 13, fancybox=True, framealpha=1, shadow=True, borderpad=1, loc = 'right')\n",
        "        if cont in [6, 7, 8]: ax[a,b].set_xlabel(r'$Voltaje\\ [V]$', size = labels_size)\n",
        "        if cont in [0,3,6]: ax[a, b].set_ylabel(r'$P\\ [mW/cm²]$', size = labels_size)   \n",
        "        cont += 1\n",
        "#            \n",
        "    ax[a,b].text(1.5,-12, r'$Estequiometría \\ ventana \\ = \\ {:.2f}$'.format(conc_n), ha=\"center\", va=\"center\", size = 15)\n",
        "    ax[a,b].text(-2, 83, r\"$\\ \\ \\ \\ \\ \\ \\ \\ -----------Espesor \\ capa \\ absorbente------------>    $\", ha=\"center\", va=\"center\", size = 20)\n",
        "    ax[a,b].text(-2, 79, r\"${}\\ \\mu m {} {}\\ \\mu m {} {}\\ \\mu m $\".format(0.01,'\\ '* 32 , 0.1, '\\ '* 32 ,1), ha=\"center\", va=\"center\", size = 20)\n",
        "    ax[a,b].text(3.7, 39, r\"$-------Espesor \\ capa \\ ventana----->$\", ha=\"center\", va=\"center\", rotation=270, size = 20)\n",
        "    ax[a,b].text(3.3, 39, r\"${}\\ \\mu m {} {}\\ \\mu m {} {}\\ \\mu m $\".format(0.01,'\\ '* 18 ,0.1, '\\ '* 18 ,1), ha=\"center\", va=\"center\", rotation=270, size = 20)\n",
        "    plt.show()\n",
        "    fig.savefig('imagenes/({:.2f})'.format(conc_n) +'.png', dpi=fig.dpi)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OUc54vBe9GDm"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZkSt3Lbo8eip"
      },
      "source": [
        "## newlines"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "91Df9f1Z8g11"
      },
      "source": [
        "for i in range(11):\n",
        "  a = n_IGN_properties(i / 10, N_n)\n",
        "  print(a[5:8])\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CsHEhLXm0byR"
      },
      "source": [
        "Eg_IGN_p, chi_IGN_p, Perm_IGN_p, Nc_IGN_p, Nv_IGN_p, Dn_IGN_p, tn_IGN_p, Ln_IGN_p, S_IGN_p, ni_IGN_p, alpha_IGN_p"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a-wRfZsW04rU"
      },
      "source": [
        "EgInGaN(0.6)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jQE07Awq2-LZ"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "x = np.linspace(0,100)\n",
        "y = np.log(1 / x)\n",
        "plt.plot(x, y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "noR4O9LWNua0"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PLP3br8qLNnD"
      },
      "source": [
        "# results to show"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BivUkB_iNt1s"
      },
      "source": [
        "xlim = 1.8\n",
        "label_size = 15\n",
        "legend_size = 14\n",
        "line_width = 2.4\n",
        "\n",
        "def Current_graph(ax):\n",
        "    for i, j in enumerate(conc_n_list):\n",
        "      ax.plot(V_list, np.array(J_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = line_width)\n",
        "      ax.set_xlim(0, xlim)\n",
        "      ax.set_ylim(0, 42.5)\n",
        "      #ax.text(2.7, 39, r\"$J\\ vs\\ V$\", ha=\"center\", va=\"center\", size = 12)\n",
        "      #ax.set_title('{:.1e}:{:.1e}'.format(w_up, w_down))\n",
        "      ax.grid('on')\n",
        "      #ax.set_xticks([0.5, 1, 1.5, 2])\n",
        "      ax.set_yticks([10, 20, 30, 40])     \n",
        "      ax.set_xlabel(r'$Voltaje\\ [V]$', size = label_size)\n",
        "      ax.set_ylabel(r'$J\\ [mA/cm²]$', size = label_size)    \n",
        "      if cont == 0: ax.legend(title = r'$In_{x}Ga_{1-x}N\\ (Absorbente)$', fontsize = legend_size, ncol = 2, fancybox=True, framealpha=1, shadow=True, borderpad=1, loc = 'best')\n",
        "      plt.tight_layout()\n",
        "\n",
        "def Power_graph(ax):\n",
        "    for i, j in enumerate(conc_n_list):\n",
        "      ax.plot(V_list, np.array(Pot_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = line_width)\n",
        "      ax.set_xlim(0, xlim)\n",
        "      ax.set_ylim(0, 25)\n",
        "      #ax.text(2.7, 20, r\"$P\\ vs\\ V$\", ha=\"center\", va=\"center\", size = 12)\n",
        "      #ax.set_title('{:.1e}:{:.1e}'.format(w_up, w_down))\n",
        "      ax.grid('on')\n",
        "      #ax.set_xticks([0.5, 1, 1.5, 2, 2.5])\n",
        "      ax.set_yticks([5, 10, 15, 20, 25])  \n",
        "      ax.set_xlabel(r'$Voltaje\\ [V]$', size = label_size)\n",
        "      ax.set_ylabel(r'$P\\ [mW/cm²]$', size = label_size)       \n",
        "      if cont == 0: ax.legend(title = r'$In_{x}Ga_{1-x}N\\ (Absorbente)$', fontsize = legend_size, ncol = 2, fancybox=True, framealpha=1, shadow=True, borderpad=1, loc = 'best')\n",
        "      plt.tight_layout()\n",
        "    if cont == 0: ax.axhline(2.2, c = 'r', ls = '--', lw = 2.4)\n",
        "    if cont == 1: ax.axhline(13.5, c = 'r', ls = '--', lw = 2.4)\n",
        "    if cont == 2: ax.axhline(23.5, c = 'r', ls = '--', lw = 2.4)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "exwT6myILPg7"
      },
      "source": [
        "##########simulacion evolucion j vs v\n",
        "%matplotlib inline\n",
        "from itertools import product\n",
        "import matplotlib as mpl\n",
        "params = {'xtick.labelsize': 14, 'ytick.labelsize': 14, 'legend.title_fontsize' : 14, \"legend.columnspacing\" : 2.5, \"legend.labelspacing\": 0.1}\n",
        "\n",
        "mpl.rcParams.update(params)\n",
        "V_list = np.linspace(0, 3, 101)\n",
        "\n",
        "N_n = 10 ** 17\n",
        "N_p = 10 ** 15\n",
        "\n",
        "conc_p = 0\n",
        "w_IGN_p  = 0.1 * 10 ** -4\n",
        "w_IGN_n_list    =  np.array([0.01, 0.1, 0.5]) * 10 ** -4\n",
        "conc_n_list = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8] #[0.15, 0.3, 0.45, 0.6, 0.75, 0.9] #np.linspace(0,0.8, 5)\n",
        "fig, ax = plt.subplots(2, 3)\n",
        "fig.set_size_inches(12, 6)\n",
        "\n",
        "cont = 0\n",
        "for w_IGN_n in w_IGN_n_list:\n",
        "    J_lists, Pot_lists = [], []\n",
        "    Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], [] \n",
        "    for conc_n in conc_n_list:\n",
        "        J_list, Pot_list,x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "        J_lists.append(J_list)\n",
        "        Pot_lists.append(Pot_list )\n",
        "        Voc, Jsc, FF, Eff, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)        \n",
        "        Jsc_list.append(Jsc)\n",
        "        Voc_list.append(Voc)\n",
        "        FF_list.append(FF)\n",
        "        Eff_list.append(Eff)  \n",
        "    Current_graph(ax[0,cont])\n",
        "    cont += 1\n",
        "cont = 0\n",
        "for w_IGN_n in w_IGN_n_list:\n",
        "    J_lists, Pot_lists = [], []\n",
        "    Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], [] \n",
        "    for conc_n in conc_n_list:\n",
        "        J_list, Pot_list, x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "        J_lists.append(J_list)\n",
        "        Pot_lists.append(Pot_list )\n",
        "        Voc, Jsc, FF, Eff, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)        \n",
        "        Jsc_list.append(Jsc)\n",
        "        Voc_list.append(Voc)\n",
        "        FF_list.append(FF)\n",
        "        Eff_list.append(Eff)\n",
        "    Power_graph(ax[1, cont])    \n",
        "    cont += 1\n",
        "#            \n",
        "#plt.text(-5.4,-18, r'$Estequiometría \\ ventana \\ = \\ {:.2f}$'.format(conc_n), ha=\"center\", va=\"center\", size = 15)\n",
        "plt.text(-1.4, 67, r\"$\\ \\ \\ \\ \\ \\ \\ \\ -----------Espesor \\ capa \\ absorbente------------>    $\", ha=\"center\", va=\"center\", size = 20)\n",
        "plt.text(-1.4, 63, r\"${}\\ \\mu m {} {}\\ \\mu m {} {}\\ \\mu m $\".format(0.01,'\\ '* 32 , 0.1, '\\ '* 32 ,1), ha=\"center\", va=\"center\", size = 20)\n",
        "#plt.text(3.7, 39, r\"$-------Espesor \\ capa \\ ventana----->$\", ha=\"center\", va=\"center\", rotation=270, size = 20)\n",
        "#plt.text(3.3, 39, r\"${}\\ \\mu m {} {}\\ \\mu m {} {}\\ \\mu m $\".format(0.01,'\\ '* 18 ,0.1, '\\ '* 18 ,1), ha=\"center\", va=\"center\", rotation=270, size = 20)\n",
        "#plt.show()\n",
        "#fig.savefig('/home/crepachonpa/Desktop/resultados2/JvsV/0-02/J_vs_V' + '({:.2f})'.format(conc_n) +'.png', dpi=fig.dpi)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mfweGzhFLP-L"
      },
      "source": [
        "%%time\n",
        "from itertools import product\n",
        "import matplotlib as mpl\n",
        "colors = ['CMRmap', 'GnBu', 'Greys' 'OrRd', 'Oranges', 'Pubu' 'Reds', 'YlOrBr', 'YlOrRd', 'afmhot', 'copper', 'gist_heat', 'hot', 'inferno', 'jet']\n",
        "params = {'xtick.labelsize': 14, 'ytick.labelsize': 14, 'legend.title_fontsize' : 12}\n",
        "mpl.rcParams.update(params)\n",
        "plt.figure()\n",
        "pixels = 50\n",
        "data = []\n",
        "datavoc = []\n",
        "datajsc = []\n",
        "\n",
        "#N_IGN_n      =  10 ** 17\n",
        "#N_Si_p       =  10 ** 17\n",
        "N_n = 10 ** 17\n",
        "N_p = 10 ** 15\n",
        "conc_n = 0.6\n",
        "\n",
        "w_IGN_p_list  =  np.logspace(-6, -2.5, pixels) \n",
        "w_IGN_n_list =  np.logspace(-5.8, -2, pixels)\n",
        "cross_product = list(product(w_IGN_p_list, w_IGN_n_list))\n",
        "\n",
        "cont = 1\n",
        "\n",
        "for conc_p in [0, 0.25, 0.5]: #,0.3,0.4,0.5]: #,0.7, 0.8, 0.9, 1]:#conc_n_list:\n",
        "    J_lists, Pot_lists = [], []\n",
        "    Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], []\n",
        "    Pmpp_list = []\n",
        "    eureca = 0\n",
        "    eureca2 = 0\n",
        "\n",
        "    for w_IGN_p, w_IGN_n in cross_product:\n",
        "        J_list, Pot_list,x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "        Pot_list = np.array(Pot_list)\n",
        "        Pmpp_list.append(np.amax(Pot_list[Pot_list >= 0]))\n",
        "        J_lists.append(J_list)\n",
        "        Pot_lists.append(Pot_list)\n",
        "        Voc, Jsc, FF, Eff, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)\n",
        "        if Eff > eureca and Eff < 100:\n",
        "          eureca = Eff\n",
        "  \n",
        "        Jsc_list.append(Jsc)\n",
        "        Voc_list.append(Voc)\n",
        "        FF_list.append(FF)\n",
        "        Eff_list.append(Eff)\n",
        "\n",
        "    values1 = (np.array(Pmpp_list) * 1000).reshape(pixels, -1)\n",
        "    data.append(values1)\n",
        "\n",
        "    values = (np.array(Voc_list)).reshape(pixels, -1)\n",
        "    datavoc.append(values)\n",
        "\n",
        "    values = (np.array(Jsc_list)).reshape(pixels, -1)\n",
        "    datajsc.append(values)\n",
        "\n",
        "    print('Eff:', np.amax(np.array(Eff_list)) * 100, 'Pot:', np.amax(values1))\n",
        "    plt.figure()\n",
        "    plt.contourf(w_IGN_n_list *10 ** 4, w_IGN_p_list * 10 ** 4, values1)\n",
        "    plt.colorbar()\n",
        "    plt.xscale('log')\n",
        "    plt.yscale('log')\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jV4RP9I_Ca_q"
      },
      "source": [
        "lista_1 = [0.1, 0.2,0.3, 0.4, 0.5, 0.6,0.7, 0.8, 0.9]\n",
        "lista_1 = [0.25, 0.5, 0.75]\n",
        "lista_2 =  lista_1[::-1]\n",
        "lista_3 = ['b)\\ ', 'c)\\ ','c)\\ ', 'd)\\ ','d)\\ ', 'e)\\ ', 'e)\\ ','e)\\ ']\n",
        "\n",
        "Names = ['a)\\ GaN-In_{0.6}Ga_{0.4}N']\n",
        "cont = 0\n",
        "for i,j in zip(lista_1, lista_2):\n",
        "  Names.append(lista_3[cont] + 'In_{' + str(i) + '}Ga_{' + str(j) + '}N-In_{0.6}Ga_{0.4}N')\n",
        "  cont += 1\n",
        "Names.append('f)\\ InN-In_{0.6}Ga_{0.4}N')\n",
        "\n",
        "Names"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5qbbPgcDQjf4"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "labelsize = 17\n",
        "conc_n_list = np.linspace(0,1, 6)\n",
        "min = 0\n",
        "max= 25\n",
        "levels = [0, 3, 6, 9, 12, 15, 18, 21, 24, 25]\n",
        "levels2 = [0, 3, 6, 9, 12, 15, 18, 20, 21, 24,24.5,24.8, 25]\n",
        "\n",
        "set_color = 'hot'\n",
        "lines = 15\n",
        "lineslines = 30\n",
        "i = 0\n",
        "fig, axes = plt.subplots(nrows=1, ncols=3)\n",
        "fig.set_size_inches((12, 5))\n",
        "dictionario = {}\n",
        "\n",
        "lim = 199.9\n",
        "lim2 = 200.1\n",
        "\n",
        "inf = 0\n",
        "for ax in axes.flat:\n",
        "    \n",
        "    if i == 0:\n",
        "          imag = ax.contour(w_IGN_n_list *10 ** 4, w_IGN_p_list * 10 ** 4, data[i], lineslines, vmin = min + 3, vmax = max + 3,line_width = 0.1, levels = levels2)#, cmap = set_color)\n",
        "          imag = ax.contourf(w_IGN_n_list *10 ** 4, w_IGN_p_list * 10 ** 4, data[i],lines, vmin = min, vmax = max, levels = levels)#, cmap = set_color)\n",
        "          plt.tight_layout()\n",
        "    im = ax.contour(w_IGN_n_list *10 ** 4, w_IGN_p_list * 10 ** 4, data[i], lineslines, vmin = min + 3, vmax = max + 3, levels = levels2)#, cmap = set_color)\n",
        "    im = ax.contourf(w_IGN_n_list *10 ** 4, w_IGN_p_list * 10 ** 4, data[i],lines,  vmin = min, vmax = max, levels = levels)#, cmap = set_color)\n",
        "    ax.set_xscale('log')\n",
        "    ax.set_yscale('log')    \n",
        "    ax.text((w_IGN_n_list[-1] * 10 ** 4 ) , w_IGN_p_list[-1] * 10 ** 4 + 20, s = r'${}$'.format(Names[i]), fontsize = 17, ha = 'right', va = 'bottom')\n",
        "    ax.set_aspect('equal')\n",
        "    plt.tight_layout()\n",
        "\n",
        "    pos = np.where(data[i] == np.amax(data[i]))\n",
        "    a = pos[0][0]\n",
        "    b = pos[1][0]\n",
        "    c = '{:.2f}'.format(data[i][a][b])\n",
        "    print(w_IGN_n_list[a] * 10 ** 4, w_IGN_p_list[b] * 10 ** 4, c)\n",
        "    ax.text(x = w_IGN_n_list[b] * 10**4 , y = w_IGN_n_list[a] * 10 ** 4 , s = r'$\\star $', fontsize = 40, ha = 'center', va = 'center', color = 'r')\n",
        "    ax.text(x = 1.5 * w_IGN_n_list[b] * 10**4 , y = w_IGN_n_list[a] * 10 ** 4 + 0.005, s = r'$Óptimo $', fontsize = 14, ha = 'left', va = 'center', color = 'k')\n",
        "\n",
        "    #ax.text(1.3 - inf, 0.09, s = r'$Óptimo\\ local$', fontsize = 14, ha = 'left', va = 'center', color = 'k')\n",
        "    #ax.text(1 - inf, 0.09, s = r'$\\star $', fontsize = 25, ha = 'center', va = 'center', color = 'r')\n",
        "\n",
        "    mask = (data[i] > lim) & (data[i] < lim2)\n",
        "    listado = np.where(mask)\n",
        "    y = listado[0]\n",
        "    x = listado[1]\n",
        "    x = x[x%3 == 0]\n",
        "    y = y[y%3 == 0]\n",
        "    print('#############')\n",
        "    for a,b in zip(y,x):\n",
        "      ax.text(x = w_IGN_n_list[b] * 10**4 , y = w_IGN_p_list[a] * 10 ** 4, s = r'$.$', fontsize = 15, ha = 'center', va = 'bottom', color = 'k')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "    ax.set_xlabel(r'$Espesor\\ absorbente\\ [\\mu m]$', fontsize = labelsize)\n",
        "    ax.set_ylabel(r'$Espesor\\ ventana\\ [\\mu m]$',   fontsize = labelsize)   \n",
        "    i += 1\n",
        "    inf += 0.2\n",
        "\n",
        "\n",
        "fig.tight_layout()\n",
        "fig.subplots_adjust(right=1.1)\n",
        "cbar_ax = fig.add_axes([1.13, 0.1, 0.015, 0.8])\n",
        "cbar = fig.colorbar(imag,extend = 'max', cax=cbar_ax, label='digit value', ticks = [0,3,6,9,12, 15, 18, 21, 24])\n",
        "cbar.set_label(r\"$Potencia\\ P_{MPP}\\ [mW/cm^{2}]$\", size = 17)\n",
        "np.amax(np.array(Eff_list))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-YUgKfJ2R3rU"
      },
      "source": [
        "dictio = {'Espesor Ventana [µm]' : [], 'Espesor Absorbente [µm]' : [], 'Potencia Pmpp [mW/cm²]' : [], 'Eficiencia [%]' : []}\n",
        "times = 3\n",
        "ind = [i/10 for i in range(0, times)]\n",
        "lim = 20\n",
        "lim2 = 100\n",
        "\n",
        "for cont in range(times):\n",
        "  print(data[cont][1, :3])\n",
        "  mask = (data[cont] > lim) & (data[cont] < lim2)\n",
        "  listado = np.where(mask)\n",
        "  x = listado[1]\n",
        "  y = listado[0]\n",
        "  min = 10 ** 10\n",
        "  max = 0\n",
        "  for i, j in zip(x, y):\n",
        "    cant = w_IGN_p_list[j] * 10 ** 4\n",
        "    if cant > max: max = cant\n",
        "    if cant < min: min = cant\n",
        "  pos = np.where(data[cont] == np.amax(data[cont]))\n",
        "  a = pos[0][0]\n",
        "  b = pos[1][0]\n",
        "  c = data[cont][a][b]\n",
        "  dictio['Espesor Ventana [µm]'].append('(' + str(np.round(min,3)) + ' - ' + str(round(max, 3)) + ')  Óptimo: {:.3f}*'.format(w_IGN_n_list[a] * 10 ** 4))\n",
        "for cont in range(times):\n",
        "  mask = (data[cont] > lim) & (data[cont] < lim2)\n",
        "  listado = np.where(mask)\n",
        "  x = listado[1]\n",
        "  y = listado[0]\n",
        "  min = 10 ** 10\n",
        "  max = 0\n",
        "  for i, j in zip(x, y):\n",
        "    cant = w_IGN_n_list[i] * 10 ** 4\n",
        "    if cant > max: max = cant\n",
        "    if cant < min: min = cant\n",
        "    if max > 600: max = 500\n",
        "  pos = np.where(data[cont] == np.amax(data[cont]))\n",
        "  a = pos[0][0]\n",
        "  b = pos[1][0]\n",
        "  c = data[cont][a][b]\n",
        "  dictio['Espesor Absorbente [µm]'].append('(' + str(np.round(min,3)) + ' - ' + str(round(max, 3)) + ') Óptimo: {:.3f}'.format(w_IGN_n_list[b] * 10 ** 4))\n",
        "\n",
        "for cont in range(times):\n",
        "  mask = (data[cont] > lim) & (data[cont] < lim2)\n",
        "  listado = np.where(mask)\n",
        "  x = listado[1]\n",
        "  y = listado[0]\n",
        "  min = 10 ** 10\n",
        "  max = 0\n",
        "  for i, j in zip(x, y):\n",
        "    cant = data[cont][j][i]\n",
        "    if cant > max: max = cant\n",
        "    if cant < min: min = cant\n",
        "    if max > 600: max = 500\n",
        "  pos = np.where(data[cont] == np.amax(data[cont]))\n",
        "  a = pos[0][0]\n",
        "  b = pos[1][0]\n",
        "  c = data[cont][a][b]\n",
        "  dictio['Potencia Pmpp [mW/cm²]'].append('(' + str(np.round(min,2)) + ' - ' + str(round(max, 2)) + ') Óptimo: {:.2f}'.format(data[cont][a][b]))\n",
        "for cont in range(times):\n",
        "  mask = (data[cont] > lim) & (data[cont] < lim2)\n",
        "  listado = np.where(mask)\n",
        "  x = listado[1]\n",
        "  y = listado[0]\n",
        "  min = 10 ** 10\n",
        "  max = 0\n",
        "  for i, j in zip(x, y):\n",
        "    cant = data[cont][j][i]\n",
        "    if cant > max: max = cant\n",
        "    if cant < min: min = cant\n",
        "    if max > 600: max = 500\n",
        "  pos = np.where(data[cont] == np.amax(data[cont]))\n",
        "  a = pos[0][0]\n",
        "  b = pos[1][0]\n",
        "  c = data[cont][a][b]\n",
        "  dictio['Eficiencia [%]'].append('(' + str(np.round(min* 100 /P_inc,2)) + ' - ' + str(round(max * 100 /P_inc, 2)) + ') Óptimo: {:.2f}'.format(data[cont][a][b]* 100 /P_inc))\n",
        "\n",
        "\n",
        "for cont in range(times):\n",
        "  mask = (data[cont] > lim) & (data[cont] < lim2)\n",
        "  #dictio['Pmpp [mW/cm²]'].append(np.round(data[cont][mask].mean(), 2) )\n",
        "  #dictio['η [%]'].append(np.round(data[cont][mask].mean()*100/P_inc, 2))\n",
        "  #dictio['Jsc [mA/cm²]'].append(np.round(datajsc[cont][mask].mean(), 2))\n",
        "  #dictio['Voc [V]'].append(np.round(datavoc[cont][mask].mean(), 5))\n",
        "\n",
        "\n",
        "DF = pd.DataFrame(data = dictio, index = ind)\n",
        "DF.columns.name = 'Estequiometría'\n",
        "\n",
        "#DF['Jsc [mA/cm²]'] = np.round(DF['Pmpp [mW/cm²]'] / DF['Voc [V]'], 2)\n",
        "#DF.style.set_properties(**{'text-align': 'Ccenter'})\n",
        "DF"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7wY2c2-BC97_"
      },
      "source": [
        "dictio = {'Espesor-Ventana' : ['(0.010-1.931) µm', '0.016 µm'], 'Espesor-Absorbente' : ['(0.231-100) µm', '0.963 µm'],  'Potencia MPP' : ['(20.02-25.05) mW/cm²', '25.05 mW/cm²']}\n",
        "df = pd.DataFrame(data = dictio, index = ['Intervalo', 'Valor óptimo'])\n",
        "df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iY-95EyKrj-m"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iBU-zWTTonCF"
      },
      "source": [
        "#Last graphic\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rcnZeEYtp4UN"
      },
      "source": [
        "def J_V_GRAPH(V_list, J_lists, xlim = 0.8, ylim = 43, label_size = 15, legend_size = 15, title_size = 18, title_legend = r'$In_{X}Ga_{1-x}N$'):\n",
        "    for i, j in enumerate(conc_n_list):\n",
        "        if conc_n_list[i] > 0.75:\n",
        "          plt.plot(V_list, np.array(J_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = 2, ls = '--')\n",
        "        else:\n",
        "          plt.plot(V_list, np.array(J_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = 2.2)\n",
        "    plt.title(r'$1.\\ Densidad\\ de\\ corriente$', fontsize = title_size)\n",
        "    #plt.xlim(0, xlim)\n",
        "    plt.ylim(0, ylim)\n",
        "    plt.xlabel(r'$Voltaje\\ [V]$', fontsize = label_size)\n",
        "    plt.ylabel(r'$J\\ [mA/cm^{2}]$', fontsize = label_size)\n",
        "    plt.legend(fontsize = legend_size, loc = 'best', title = title_legend)\n",
        "    plt.grid('on')\n",
        "    plt.tight_layout()\n",
        "\n",
        "def P_V_GRAPH(V_list, Pot_lists, xlim = 0.8, ylim = 25, label_size = 15, legend_size = 15, title_size = 18, title_legend = r'$In_{X}Ga_{1-x}N$'):\n",
        "    for i, j in enumerate(conc_n_list):\n",
        "        if conc_n_list[i] > 0.75:\n",
        "          plt.plot(V_list, np.array(Pot_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = 2, ls = '--')\n",
        "        else:\n",
        "          plt.plot(V_list, np.array(Pot_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = 2.2)\n",
        "    plt.title(r'$2.\\ Densidad\\ de\\ potencia$', fontsize = title_size)\n",
        "    #plt.xlim(0, xlim)\n",
        "    plt.ylim(0, ylim)\n",
        "    plt.xlabel(r'$Voltaje\\ [V]$', fontsize = label_size)\n",
        "    plt.ylabel(r'$P\\ [mW/cm^{2}]$', fontsize = label_size)\n",
        "    plt.legend(fontsize = legend_size, loc = 'best', title = title_legend)\n",
        "    plt.grid('on')\n",
        "    plt.tight_layout()\n",
        "\n",
        "def characteristic_graph(conc_n_list, data, title, ylabel, limits, axes_size = 12, title_size = 12):\n",
        "      plt.plot(conc_n_list, data, lw = 2.5)\n",
        "      #plt.ylim(0)\n",
        "      plt.ylim(limits[0], limits[1])\n",
        "      plt.xlim(0.2,0.8)\n",
        "      plt.xticks(np.linspace(0.2,0.8, 7))\n",
        "      plt.ylabel(ylabel = ylabel, fontsize = axes_size)\n",
        "      plt.title(label = title, fontsize = title_size)\n",
        "      plt.xlabel(r'$x\\ $', fontsize = axes_size)\n",
        "      plt.grid()\n",
        "\n",
        "      #plt.xticks([0.2, 0.4, 0.6,0.8])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4CjNrGDsop0S"
      },
      "source": [
        "V_list = np.linspace(0, 3, 501)\n",
        "J_lists, Pot_lists = [], []\n",
        "Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], []\n",
        "\n",
        "w_IGN_p     = 0.01 * 10 ** - 4\n",
        "w_IGN_n     = 0.963 * 10 ** - 4\n",
        "N_n = 1 * 10 ** 17\n",
        "N_p =  1 * 10 ** 15\n",
        "\n",
        "conc_p = 0.\n",
        "conc_n_list = list(np.linspace(0, 1, 11)) #[0, 0.15, 0.3, 0.45, 0.6, 0.75, 0.9, 1]#np.linspace(0.15, 0.9, 6)\n",
        "for conc_n in conc_n_list:\n",
        "    J_list, Pot_list,x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "    J_lists.append(J_list)\n",
        "    Pot_lists.append(Pot_list)\n",
        "    Voc, Jsc, FF, Eff,x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)\n",
        "    Jsc_list.append(Jsc)\n",
        "    Voc_list.append(Voc)\n",
        "    FF_list.append(FF)\n",
        "    Eff_list.append(Eff)\n",
        "J_lists_, Pot_lists_ = [], []\n",
        "Jsc_list_, Voc_list_, FF_list_, Eff_list_ = [], [], [], []\n",
        "\n",
        "conc_p = 0.\n",
        "conc_n_list_ = np.round(np.arange(0.2, 0.81, 0.01), 2)\n",
        "for conc_n in conc_n_list_:\n",
        "    J_list_, Pot_list_, x_n_list_, x_p_list_ = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "    J_lists_.append(J_list_)\n",
        "    Pot_lists_.append(Pot_list_)\n",
        "    Voc_, Jsc_, FF_, Eff_, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list_, Pot_list_, V_list)\n",
        "    Jsc_list_.append(Jsc_)\n",
        "    Voc_list_.append(Voc_)\n",
        "    FF_list_.append(FF_)\n",
        "    Eff_list_.append(Eff_)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0VmZoyfEoqW8"
      },
      "source": [
        "fig = plt.figure(figsize=(16, 12))\n",
        "title_size = 18\n",
        "axes_size = 15\n",
        "params = {'xtick.labelsize': 13, 'ytick.labelsize': 13, 'legend.title_fontsize' : 17}\n",
        "mpl.rcParams.update(params)\n",
        "\n",
        "map_label = {(0, 0) : r'$Jsc\\ [mA/cm^{2}]$', \n",
        "             (0, 1) : r'$Voc\\ [V]$',\n",
        "             (1, 0) : r'$FF\\ [\\%]$',\n",
        "             (1, 1) : r'$\\eta\\ [\\%]$'}\n",
        "map_title = {(0, 0) : r'$a.Corriente\\ Jsc$', \n",
        "             (0, 1) : r'$b.Voltaje\\ Voc$',\n",
        "             (1, 0) : r'$c.Factor\\ de\\ llenado$',\n",
        "             (1, 1) : r'$d.Eficiencia$'}\n",
        "rows = 3\n",
        "columns = 4\n",
        "grid = plt.GridSpec(rows, columns, wspace = .4, hspace = .4)\n",
        "\n",
        "plt.subplot(grid[:2, :2])\n",
        "J_V_GRAPH(V_list, J_lists)\n",
        "\n",
        "plt.subplot(grid[:2, 2:])\n",
        "P_V_GRAPH(V_list, Pot_lists)\n",
        "\n",
        "plt.subplot(grid[2, 0])\n",
        "characteristic_graph(conc_n_list_,  Jsc_list_, map_title[(0, 0)], map_label[(0, 0)], (1, 45))\n",
        "\n",
        "plt.subplot(grid[2, 1])\n",
        "characteristic_graph(conc_n_list_,  Voc_list_, map_title[(0, 1)], map_label[(0, 1)], (0.1, 3))\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.subplot(grid[2, 2])\n",
        "characteristic_graph(conc_n_list_,  FF_list_, map_title[(1, 0)], map_label[(1, 0)], (41, 95))\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.subplot(grid[2, 3])\n",
        "characteristic_graph(conc_n_list_,  np.array(Eff_list_) * 100, map_title[(1, 1)], map_label[(1, 1)], (10, 26))\n",
        "plt.tight_layout()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rIr1h1KKoy3W"
      },
      "source": [
        "fig = plt.figure(figsize=(6.5, 6.5))\n",
        "title_size = 13\n",
        "axes_size = 13\n",
        "params = {'xtick.labelsize': 11, 'ytick.labelsize': 11, 'legend.title_fontsize' : 17}\n",
        "mpl.rcParams.update(params)\n",
        "\n",
        "map_label = {(0, 0) : r'$Jsc\\ [mA/cm^{2}]$', \n",
        "             (0, 1) : r'$Voc\\ [V]$',\n",
        "             (1, 0) : r'$FF\\ [\\%]$',\n",
        "             (1, 1) : r'$\\eta\\ [\\%]$'}\n",
        "map_title = {(0, 0) : r'$a)\\ Densidad\\ de\\ corriente\\ Jsc$', \n",
        "             (0, 1) : r'$b)\\ Voltaje\\ Voc$',\n",
        "             (1, 0) : r'$c)\\ Factor\\ de\\ llenado$',\n",
        "             (1, 1) : r'$d)\\ Eficiencia$'}\n",
        "rows = 2\n",
        "columns = 2\n",
        "grid = plt.GridSpec(rows, columns, wspace = .4, hspace = .4)\n",
        "poss = np.where(conc_n_list_ == 0.6)[0][0]\n",
        "y1 = Jsc_list_[poss]\n",
        "y2 = Voc_list_[poss]\n",
        "y3 = FF_list_[poss]\n",
        "y4 = Eff_list_[poss]\n",
        "plt.subplot(grid[0, 0])\n",
        "characteristic_graph(conc_n_list_,  Jsc_list_, map_title[(0, 0)], map_label[(0, 0)], (2, 48))\n",
        "plt.vlines(0.6,0, y1, ls = '--', color = 'r')\n",
        "plt.axhline(y1, 0, 2/3, ls = '--', color = 'r')\n",
        "\n",
        "\n",
        "plt.subplot(grid[0, 1])\n",
        "characteristic_graph(conc_n_list_,  Voc_list_, map_title[(0, 1)], map_label[(0, 1)], (0.4, 2.2))\n",
        "plt.vlines(0.6, 0, y2,ls = '--', color = 'r')\n",
        "plt.tight_layout()\n",
        "plt.axhline(y2,0, 2/3, ls = '--', color = 'r')\n",
        "\n",
        "plt.subplot(grid[1, 0])\n",
        "characteristic_graph(conc_n_list_,  FF_list_, map_title[(1, 0)], map_label[(1, 0)], (82.1, 93.5))\n",
        "plt.vlines(0.6, 0, y3,ls = '--', color = 'r')\n",
        "plt.axhline(y3,0, 2/3, ls = '--', color = 'r')\n",
        "plt.tight_layout()\n",
        "\n",
        "__ = 5\n",
        "plt.subplot(grid[1, 1])\n",
        "characteristic_graph(conc_n_list_,  np.array(Eff_list_) * 100, map_title[(1, 1)], map_label[(1, 1)], (9, 27))\n",
        "plt.tight_layout()\n",
        "plt.yticks([10,12.5, 15,17.5, 20, 22.5, 25])\n",
        "plt.text(x = 0.6-0.008, y = y4 * 100 + 0.2, s = r'$\\star $', fontsize = 40, ha = 'center', va = 'center', color = 'k')  \n",
        "\n",
        "#ax.text(1 - inf, 0.09, s = r'$\\star $', fontsize = 25, ha = 'center', va = 'center', color = 'r')\n",
        "plt.axhline(y4 * 100 +0.1, ls = '--', color = 'r')\n",
        "plt.axvline(0.6, ls = '--', color = 'r')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ngmo05Tcr2eV"
      },
      "source": [
        "28.74*0.99*0.8806"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bkm_wdMeBqVQ"
      },
      "source": [
        "conc_n_list_[40]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uKlGbPYmBwJH"
      },
      "source": [
        "J_lists, Pot_lists = [], []\n",
        "Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], []\n",
        "xn_list, xp_list = [], []\n",
        "\n",
        "conc_p = 0\n",
        "#N_IGN_n = 1 * 10 ** 15\n",
        "#N_Si_p = 2.23 * 10 ** 17\n",
        "w_IGN_n     =  1 * 10 ** - 4\n",
        "w_IGN_p      =  0.016 * 10 ** - 4\n",
        "\n",
        "N_n = 10 ** 17\n",
        "N_p = 10 ** 17\n",
        "\n",
        "#N_IGN_n     = 10 ** 15\n",
        "#N_Si_p      = 2.23 * 10  ** 17\n",
        "#w_IGN_n     = 10 * 10 ** - 4\n",
        "#w_Si_p      = 60 * 10 ** - 4\n",
        "\n",
        "conc_n_list = np.linspace(0,1, 10)\n",
        "\n",
        "for conc_n in conc_n_list:\n",
        "    J_list, Pot_list, x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "    J_lists.append(J_list)\n",
        "    Pot_lists.append(Pot_list)\n",
        "\n",
        "    Voc, Jsc, FF, Eff, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)\n",
        "\n",
        "    Jsc_list.append(Jsc)\n",
        "    Voc_list.append(Voc)\n",
        "    FF_list.append(FF)\n",
        "    Eff_list.append(Eff)\n",
        "    xn_list.append(x_n_opt)\n",
        "    xp_list.append(x_p_opt)\n",
        "\n",
        "\n",
        "plt.figure()\n",
        "for i, j in enumerate(conc_n_list):\n",
        "    plt.plot(V_list, np.array(J_lists[i]) * 10 ** 3, label = 'x = {:.2f}'.format(j))\n",
        "    plt.xlim(0, 0.8)\n",
        "    plt.ylim(0, 40)\n",
        "    plt.grid()\n",
        "    plt.legend()\n",
        "    plt.xlabel('Voljaje [V]')\n",
        "    plt.ylabel('J [mA/cm²]')\n",
        "plt.figure()\n",
        "for i, j in enumerate(conc_n_list):\n",
        "    plt.plot(V_list, np.array(Pot_lists[i]) * 10 ** 3, label = 'x = {:.2f}'.format(j))\n",
        "    plt.xlim(0, 0.8)\n",
        "    plt.ylim(0, 20)\n",
        "    plt.grid()\n",
        "\n",
        "plt.subplot(1,2,1)\n",
        "plt.plot(conc_n_list, np.array(xn_list) * 10 ** 4)\n",
        "\n",
        "plt.subplot(1,2,2)\n",
        "plt.plot(conc_n_list, np.array(xp_list) * 10 ** 4)\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZLjrQGL93maO"
      },
      "source": [
        "V_list = np.linspace(0, 3, 201)\n",
        "J_lists, Pot_lists = [], []\n",
        "Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], []\n",
        "\n",
        "\n",
        "\n",
        "w_IGN_p     = 0.01 * 10 ** - 4\n",
        "w_IGN_n     = 0.963 * 10 ** - 4\n",
        "N_n = 1 * 10 ** 17\n",
        "N_p =  1 * 10 ** 15\n",
        "\n",
        "conc_p = 0.\n",
        "conc_n_list = list(np.linspace(0, 1, 6)) #[0, 0.15, 0.3, 0.45, 0.6, 0.75, 0.9, 1]#np.linspace(0.15, 0.9, 6)\n",
        "conc_n = 0.6\n",
        "J_list, Pot_list,x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "J_lists.append(J_list)\n",
        "Pot_lists.append(Pot_list)\n",
        "Voc, Jsc, FF, Eff,x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)\n",
        "Jsc_list.append(Jsc)\n",
        "Voc_list.append(Voc)\n",
        "FF_list.append(FF)\n",
        "Eff_list.append(Eff)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oDMdsjmU43Mf"
      },
      "source": [
        "color1 = 'k'\n",
        "color2 = 'r'\n",
        "tamaño_ejes = 15\n",
        "limx = 1\n",
        "limy1 = 40\n",
        "limy2 = 27.5\n",
        "\n",
        "params = {'xtick.labelsize': 14, 'ytick.labelsize': 14, 'legend.title_fontsize' : 14, \"legend.columnspacing\" : 0, \"legend.labelspacing\": 0}\n",
        "mpl.rcParams.update(params)\n",
        "\n",
        "fig, ax1 = plt.subplots()#figsize = (6,3.5))\n",
        "ax1.set_xlabel(r'$V \\ [Voltios]$', size = tamaño_ejes)\n",
        "ax1.set_ylabel(r'$J \\ [mA/cm²]$', size = tamaño_ejes, color = color1)\n",
        "ax1.plot(V_list, np.array(J_list) * 10 ** 3, color = color1)\n",
        "#plt.xticks([0, 0.2, 0.39, Vmpp + 0.01 ,0.54, 0.6], [0, 0.2, 0.4, r'$V_{MPP}$', r'$V_{oc}$',0.6])\n",
        "#plt.yticks([5, 10, Jmpp * 1000 , Jmpp*1000+1.6, 20], [5, 10, r'$J_{MPP}$',r'$J_{sc}$', 20])\n",
        "ax1.set_ylim(0,limy1)\n",
        "ax1.set_xlim(0,limx)\n",
        "ax1.grid()\n",
        "\n",
        "plt.text(0.62, 37 - 22,'$J_{SC}  = %2.2f \\ %s$' % (Jsc, 'mA/cm^{2}'), ha=\"center\", va=\"center\", size = 14)\n",
        "plt.text(0.62, 34 - 22,'$V_{OC} = %2.2f \\ V$' % Voc, ha=\"center\", va=\"center\", size = 14)\n",
        "plt.text(0.62, 31 - 22,'$FF   = %2.2f \\ %s$' % (88.47, '\\%'), ha=\"center\", va=\"center\", size = 14)\n",
        "plt.text(0.62, 28 - 22,'$\\eta   = %2.2f %s$' % (Eff * 100, '\\%'), ha=\"center\", va=\"center\", size = 14)\n",
        "\n",
        "\n",
        "#plt.scatter(100, 100, c = 'white', label = '$V_{OC} = %2.2f \\ V$' % Voc)\n",
        "#plt.scatter(100, 100, c = 'white', label = '$J_{SC} = %2.2f \\ %s$' % (Jsc, 'mA\\ /\\ cm^{2}'))\n",
        "#plt.scatter(100, 100, c = 'white', label = '$FF = %2.2f \\ %s$' % (FF, '\\%'))\n",
        "#plt.scatter(100, 100, c = 'white', label = '$\\eta = %2.2f %s$' % (Eff * 100, '\\%'))\n",
        "\n",
        "plt.legend(fontsize = legend_size, loc = (-0.1,20/40), ncol = 1)\n",
        " \n",
        "\n",
        "#plt.text(0, 20, r\"$$\", ha=\"center\", va=\"center\", size = 20)\n",
        "#plt.axvline(Vmpp, ymin = 0,ymax = Jmpp * 1000/limy1, ls = '--', color = 'k')\n",
        "#plt.axhline(Jmpp * 1000, xmin = 0,xmax = Vmpp/limx, ls = '--', color = 'k')\n",
        "ax2 = ax1.twinx()\n",
        "ax2.set_ylabel(r'$P \\ [mW/cm²]$', size = tamaño_ejes, color = color2)  # we already handled the x-label with ax1\n",
        "ax2.plot(V_list, np.array(Pot_list) * 10 ** 3, color = color2)\n",
        "ax2.set_ylim(0,limy2)\n",
        "ax2.tick_params(axis='y', labelcolor=color2)\n",
        "#plt.yticks([3, 6, 9, Pot_list[pos[0][0]] * 1000], [3, 6, 9, r'$P_{MPP}$'] )\n",
        "#plt.scatter(Vmpp, Pot_list[pos[0][0]] * 1000, s = 50, c = 'r')\n",
        "#plt.axhline(Pot_list[pos[0][0]] * 1000, xmin = Vmpp/limx, xmax = 1, ls = '--', c = 'r')\n",
        "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ARbJa5XTtPi1"
      },
      "source": [
        "28.6*0.99*88.47"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MXqtlTNuXm96"
      },
      "source": [
        "def J_V_GRAPH(V_list, J_lists, xlim = 0.8, ylim = 43, label_size = 15, legend_size = 15, title_size = 18, title_legend = r'$In_{X}Ga_{1-x}N$'):\n",
        "    for i, j in enumerate(N_LIST):\n",
        "    #    if conc_n_list[i] > 0.75:\n",
        "    #      None\n",
        "    #      #plt.plot(V_list, np.array(J_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = 2, ls = '--')\n",
        "    #    else:\n",
        "        plt.plot(V_list, np.array(J_lists[i]) * 10 ** 3, label = '{:.2e}'.format(j), lw = 2.2)\n",
        "    plt.title(r'$1.\\ Densidad\\ de\\ corriente$', fontsize = title_size)\n",
        "    #plt.xlim(0, xlim)\n",
        "    plt.ylim(0, ylim)\n",
        "    plt.xlabel(r'$Voltaje\\ [V]$', fontsize = label_size)\n",
        "    plt.ylabel(r'$J\\ [mA/cm^{2}]$', fontsize = label_size)\n",
        "    #plt.legend(fontsize = legend_size, loc = 'best', title = title_legend)\n",
        "    plt.grid('on')\n",
        "    plt.tight_layout()\n",
        "\n",
        "def P_V_GRAPH(V_list, Pot_lists, xlim = 0.8, ylim = 25, label_size = 15, legend_size = 15, title_size = 18, title_legend = r'$In_{X}Ga_{1-x}N$'):\n",
        "    for i, j in enumerate(N_LIST):\n",
        "    #    if conc_n_list[i] > 0.75:\n",
        "    #      None\n",
        "    #      #plt.plot(V_list, np.array(Pot_lists[i]) * 10 ** 3, label = '{:.2f}'.format(j), lw = 2, ls = '--')\n",
        "    #    else:\n",
        "        plt.plot(V_list, np.array(Pot_lists[i]) * 10 ** 3, label = '{:.2e}'.format(j), lw = 2.2)\n",
        "    plt.title(r'$2.\\ Densidad\\ de\\ potencia$', fontsize = title_size)\n",
        "    #plt.xlim(0, xlim)\n",
        "    plt.ylim(0, ylim)\n",
        "    plt.xlabel(r'$Voltaje\\ [V]$', fontsize = label_size)\n",
        "    plt.ylabel(r'$P\\ [mW/cm^{2}]$', fontsize = label_size)\n",
        "    #plt.legend(fontsize = legend_size, loc = 'best', title = title_legend)\n",
        "    plt.grid('on')\n",
        "    plt.tight_layout()\n",
        "\n",
        "def characteristic_graph(conc_n_list, data, title, ylabel, limits, axes_size = 13, title_size = 15):\n",
        "      plt.plot(N_LIST, data, lw = 2.5)\n",
        "      #plt.ylim(0)\n",
        "      plt.ylim(limits[0], limits[1])\n",
        "      #plt.xlim(0.2,0.8)\n",
        "      plt.xticks(np.linspace(0.2,0.8, 7))\n",
        "      plt.ylabel(ylabel = ylabel, fontsize = axes_size)\n",
        "      plt.title(label = title, fontsize = title_size)\n",
        "      plt.xlabel(r'$Estequiometría\\ $', fontsize = axes_size)\n",
        "      plt.grid()\n",
        "      plt.xscale('log')\n",
        "\n",
        "      #plt.xticks([0.2, 0.4, 0.6,0.8])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ftrbevoPTQwJ"
      },
      "source": [
        "V_list = np.linspace(0, 3, 201)\n",
        "J_lists, Pot_lists = [], []\n",
        "Jsc_list, Voc_list, FF_list, Eff_list = [], [], [], []\n",
        "\n",
        "w_IGN_p     = 0.01 * 10 ** - 4\n",
        "w_IGN_n     = 1 * 10 ** - 4\n",
        "N_n =  1 * 10 ** 16\n",
        "N_p =  1 * 10 ** 14\n",
        "\n",
        "conc_p = 0.\n",
        "conc_n = 0.6\n",
        "conc_n_list = list(np.linspace(0, 1, 11)) #[0, 0.15, 0.3, 0.45, 0.6, 0.75, 0.9, 1]#np.linspace(0.15, 0.9, 6)\n",
        "N_LIST = np.logspace(13, 19, 40)\n",
        "\n",
        "for N_p in N_LIST:\n",
        "    J_list, Pot_list,x_n_list, x_p_list = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "    J_lists.append(J_list)\n",
        "    Pot_lists.append(Pot_list)\n",
        "    Voc, Jsc, FF, Eff,x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list, Pot_list, V_list)\n",
        "    Jsc_list.append(Jsc)\n",
        "    Voc_list.append(Voc)\n",
        "    FF_list.append(FF)\n",
        "    Eff_list.append(Eff)\n",
        "J_lists_, Pot_lists_ = [], []\n",
        "Jsc_list_, Voc_list_, FF_list_, Eff_list_ = [], [], [], []\n",
        "\n",
        "conc_p = 0.\n",
        "conc_n_list_ = np.linspace(0, 1, 100)\n",
        "N_LIST = np.logspace(13, 19, 40)\n",
        "for N_p in N_LIST:\n",
        "    J_list_, Pot_list_, x_n_list_, x_p_list_ = base_simulation(N_n, N_p, w_IGN_n, w_IGN_p, conc_n, conc_p)\n",
        "    J_lists_.append(J_list_)\n",
        "    Pot_lists_.append(Pot_list_)\n",
        "    Voc_, Jsc_, FF_, Eff_, x_n_opt, x_p_opt = CHARACTERISTICS_VALUES(J_list_, Pot_list_, V_list)\n",
        "    Jsc_list_.append(Jsc_)\n",
        "    Voc_list_.append(Voc_)\n",
        "    FF_list_.append(FF_)\n",
        "    Eff_list_.append(Eff_)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hgWCPRP7WoKP"
      },
      "source": [
        "fig = plt.figure(figsize=(16, 12))\n",
        "title_size = 18\n",
        "axes_size = 15\n",
        "params = {'xtick.labelsize': 13, 'ytick.labelsize': 13, 'legend.title_fontsize' : 17}\n",
        "mpl.rcParams.update(params)\n",
        "\n",
        "map_label = {(0, 0) : r'$Jsc\\ [mA/cm^{2}]$', \n",
        "             (0, 1) : r'$Voc\\ [V]$',\n",
        "             (1, 0) : r'$FF\\ [\\%]$',\n",
        "             (1, 1) : r'$\\eta\\ [\\%]$'}\n",
        "map_title = {(0, 0) : r'$a.Corriente\\ Jsc$', \n",
        "             (0, 1) : r'$b.Voltaje\\ Voc$',\n",
        "             (1, 0) : r'$c.Factor\\ de\\ llenado$',\n",
        "             (1, 1) : r'$d.Eficiencia$'}\n",
        "rows = 3\n",
        "columns = 4\n",
        "grid = plt.GridSpec(rows, columns, wspace = .4, hspace = .4)\n",
        "\n",
        "plt.subplot(grid[:2, :2])\n",
        "J_V_GRAPH(V_list, J_lists)\n",
        "\n",
        "plt.subplot(grid[:2, 2:])\n",
        "P_V_GRAPH(V_list, Pot_lists)\n",
        "\n",
        "plt.subplot(grid[2, 0])\n",
        "characteristic_graph(conc_n_list_,  Jsc_list_, map_title[(0, 0)], map_label[(0, 0)], (1, 45))\n",
        "\n",
        "plt.subplot(grid[2, 1])\n",
        "characteristic_graph(conc_n_list_,  Voc_list_, map_title[(0, 1)], map_label[(0, 1)], (0.1, 3))\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.subplot(grid[2, 2])\n",
        "characteristic_graph(conc_n_list_,  FF_list_, map_title[(1, 0)], map_label[(1, 0)], (41, 95))\n",
        "plt.tight_layout()\n",
        "\n",
        "plt.subplot(grid[2, 3])\n",
        "characteristic_graph(conc_n_list_,  np.array(Eff_list_) * 100, map_title[(1, 1)], map_label[(1, 1)], (2.5, 26))\n",
        "plt.tight_layout()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8b32-icXWqjS"
      },
      "source": [
        "a = np.where(Eff_list_ == np.amax(Eff_list_))[0][0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LwoWYNvWa5Jl"
      },
      "source": [
        "print('{:.2e}'.format(N_LIST[a]))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HmbII1MMcAXG"
      },
      "source": [
        "np.amax(Eff_list_)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-B9C5uSyedHv"
      },
      "source": [
        "plt.plot(Eff_list_)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q8SPaVsKehv6"
      },
      "source": [
        "28.6 * 0.99 * 88.14\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c1qdtdT2pl_H"
      },
      "source": [
        "EgInGaN(0.6)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BBie-D4JUFVm"
      },
      "source": [
        "35.26 * 0.63 * 0.8329"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aa6VtgcV5loi"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0rFOYgKfVvo8"
      },
      "source": [
        "#gift\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zdbq5nCuVxZ8"
      },
      "source": [
        "import imageio\n",
        "images = []\n",
        "for filename in filenames:\n",
        "    images.append(imageio.imread(filename))\n",
        "imageio.mimsave('/path/to/movie.gif', images)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
